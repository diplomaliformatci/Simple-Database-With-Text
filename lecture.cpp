#include <iostream>#include <fstream>#include <string>#include <cstdlib>using namespace std;struct lecture {	char nameBuffer[50];	int lectureCode;		lecture *nextLecture;	};lecture *register_Lecture_to_Lecture_List(lecture *lectureListHead, char *name , int lectureCode);lecture *create_Lecture_List();void print_Lecture_Options();void search_Lecture_By_Name(lecture *lectureListHead , char *name);void change_Lecture_Information(int , lecture *lectureListHead);void execute_Function_Defined_By_userChoise_For_Lecture_Option(char);void write_Lecture_Information_To_Lecture_File(lecture *lectureListHead);void print_Lectures(lecture *lectureListHead );int main() {	char userChoiseForLectureOption;		while (5) {	print_Lecture_Options();	cin >> userChoiseForLectureOption;	execute_Function_Defined_By_userChoise_For_Lecture_Option(userChoiseForLectureOption);}		return 0;}void write_Lecture_Information_To_Lecture_File(lecture *lectureListHead) {	struct lecture *temp = lectureListHead;	FILE *file;	file = fopen("lecture.txt" , "w");	while(temp != NULL) {		fprintf(file , "%s\t%d\n" , temp -> nameBuffer , temp -> lectureCode);		temp = temp -> nextLecture;	}	fclose(file);}void change_Lecture_Information(int lectureCode, lecture *lectureListHead) {	struct lecture *temp = lectureListHead;	while (temp != NULL) {		if (temp -> lectureCode == lectureCode) {			cout << "Ders Bilgileri : " << temp -> nameBuffer << "\t" << temp -> lectureCode  << endl;			cout << "Yeni Bilgileri Giriniz";			cin >> temp->nameBuffer;			cout << "Dersin Ders Kodunu Giriniz" << endl;			cin >> temp -> lectureCode;			write_Lecture_Information_To_Lecture_File(lectureListHead);			return;		}		temp = temp -> nextLecture;		}	cout << "Aradiginiz Ders Bulunamadi";}void execute_Function_Defined_By_userChoise_For_Lecture_Option(char userChoise) {	struct lecture *lectureListHead = create_Lecture_List();	system("clear");	char name[50];	int lectureCode;		switch (userChoise) {		case 'a':		cout << "Kayit Etmek Istediginiz Dersin Adini Giriniz";		cin >> name;		cout << "Kayit Etmek Istediginiz Dersin Kodunu Giriniz:";		cin >> lectureCode;		lectureListHead = register_Lecture_to_Lecture_List(lectureListHead , name , lectureCode);		write_Lecture_Information_To_Lecture_File(lectureListHead);		break;				case 'b':		cout << "Bilgilerini Guncellemek Istediginiz Dersin Kodunu Giriniz:" ;		cin >> lectureCode;		change_Lecture_Information(lectureCode , lectureListHead);		break;				case 'c':		cout << "Dersler Listeleniyor"<< endl;		print_Lectures(lectureListHead);		break;						case 'd':			cout << "Bilgilerini Goruntulemek Istediginiz Dersin Adini Giriniz:";			cin >> name;			search_Lecture_By_Name(lectureListHead , name);		break;	}									}void search_Lecture_By_Name(lecture *lectureListHead , char *name) {	struct lecture *temp = lectureListHead;	while (temp != NULL) {		if (strcmp(temp->nameBuffer , name) == 0) {			cout << "Ders Bilgileri : " << temp -> nameBuffer << "\t" << temp -> lectureCode << endl;			return;		}		temp = temp -> nextLecture;	}	cout << "Aradiginiz Ders Bulunamadi";}lecture *create_Lecture_List() {	FILE *file;		file = fopen("lecture.txt" , "r");	struct lecture *lectureListHead = NULL;	char name[50];	int lectureCode;		while(!feof(file)) {				fscanf(file, "%s\t%d\n",name,&lectureCode);				lectureListHead = register_Lecture_to_Lecture_List(lectureListHead , name , lectureCode);	}		return lectureListHead;	}lecture *register_Lecture_to_Lecture_List(lecture *lectureListHead, char *name , int lectureCode) {	struct lecture *temp = lectureListHead;	if (lectureListHead == NULL) {		lectureListHead = new lecture();		strcpy(lectureListHead -> nameBuffer , name);		lectureListHead -> lectureCode = lectureCode;		lectureListHead -> nextLecture = NULL;		return lectureListHead;	} else if (temp -> lectureCode < lectureCode) {		while (temp -> nextLecture != NULL && temp -> nextLecture->lectureCode < lectureCode) {			temp = temp -> nextLecture;		}				struct lecture *newLecture = new lecture();		strcpy(newLecture -> nameBuffer , name);		newLecture -> lectureCode = lectureCode;				if (temp -> nextLecture == NULL) {			temp -> nextLecture = newLecture;			newLecture -> nextLecture = NULL;		} else {			newLecture -> nextLecture = temp -> nextLecture;			temp -> nextLecture = newLecture; 		}				return lectureListHead;		} else {		struct lecture *newLecture = new lecture();		strcpy(newLecture -> nameBuffer , name);		newLecture -> lectureCode = lectureCode;		newLecture -> nextLecture = lectureListHead;		return newLecture;	}}void print_Lectures(lecture *lectureListHead ) {	struct lecture *temp = lectureListHead;	while (temp != NULL) {			cout << "Ders Bilgileri : " << temp -> nameBuffer << "\t" << temp -> lectureCode << endl;		temp = temp -> nextLecture;	}}void print_Lecture_Options() {	cout << "a. Ders Ekleme" << endl;	cout << "b. Ders Bilgileri Guncelleme" << endl;	cout << "c. Ders Listeleme" << endl;	cout << "d. Ders Arama (Ders Adina Gore)";}