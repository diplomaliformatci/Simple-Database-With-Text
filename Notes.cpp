#include <iostream>#include <fstream>#include <cstring>#include <cstdlib>using namespace std;struct Note {		int studentNumber;	int studentLectureCode;	int studentLectureNote;		Note *nextNote;		};struct student {	int studentNumber;	char studentNameBuffer[50];	char studentSectionBuffer[50];	int Grade;};struct lecture {	int lectureCode;	char lectureNameBuffer[50];};void print_Lecture_Note_Options();void execute_Function_Defined_By_userChoise_For_Lecture_Notes_Option(char);Note *create_Lecture_Notes_List();Note *register_Note_to_LectureNote_List(Note *NoteListHead, int, int, int);void change_Lecture_Information(int , Note *NoteListHead , int) ;void write_Note_Information_To_Note_File(Note *NoteListHead);void search_Lecture_By_Number(Note *lectureListHead , int );void plot_For_Student(Note *NoteListHead , int studentNumber );lecture *get_Lecture_Information_From_Lecture_File(int);student *get_Student_Information_From_Student_File(int);int main() {	char userChoiseForLectureNotesOption;	system("clear");	while (5) {	print_Lecture_Note_Options();	cin >> userChoiseForLectureNotesOption;	execute_Function_Defined_By_userChoise_For_Lecture_Notes_Option(userChoiseForLectureNotesOption);}		return 0;}void write_Note_Information_To_Note_File(Note *NoteListHead) {	struct Note *temp = NoteListHead;	FILE *file;	file = fopen("lectureNotes.txt" , "w");	while(temp != NULL) {		fprintf(file , "%d\t%d\t%d\n" , temp -> studentNumber , temp -> studentLectureCode , temp -> studentLectureNote);		temp = temp -> nextNote;	}	fclose(file);}void change_Lecture_Information(int studentLectureCode, Note *NoteListHead , int studentNumber) {	struct Note *temp = NoteListHead;	while (temp != NULL) {		cout << temp-> studentLectureCode << "\t" << studentLectureCode << "\t" << temp -> studentNumber << "\t" << studentNumber << endl;		if (temp -> studentLectureCode == studentLectureCode && temp -> studentNumber == studentNumber) {			cout << "Ders Bilgileri : " << temp -> studentLectureCode << "\t" << temp -> studentNumber  << endl;			cout << "Not Bilgisini Giriniz";			cin >> temp-> studentLectureNote;			write_Note_Information_To_Note_File(NoteListHead);			cout << "Not Bilgisi Degistirildi" << " Not Olarak " << temp -> studentLectureNote << " Eklendi";			return;		}		temp = temp -> nextNote;		}	//cout << "Aradiginiz Ogrenciye Ait Ders Bulunamadi";}void execute_Function_Defined_By_userChoise_For_Lecture_Notes_Option(char userChoise) {	struct Note *NoteListHead = create_Lecture_Notes_List();	system("clear");	int studentNumber;	int lectureCode;	int lectureNote;	switch (userChoise) {		case 'a' :		cout << "Ders Eklemek Istediginiz Ogrencinin Numarasini Giriniz:";		cin >> studentNumber;		cout << "Ogrenciye Eklemek Istediginiz Dersin Kodunu Giriniz:";		cin >> lectureCode;		NoteListHead = register_Note_to_LectureNote_List(NoteListHead , studentNumber , lectureCode , lectureNote);		write_Note_Information_To_Note_File(NoteListHead);		break;				case 'b':		cout << "Not eklemek Istediginiz ogrencinin Numarasini giirniz";		cin >> studentNumber;		cout << "Not eklemek istediginiz ogrencinin ders kodunu giriniz:";		cin >> lectureCode;		change_Lecture_Information(lectureCode , NoteListHead , studentNumber);		break;						case 'c':		cout << "Derslerini Goruntulemek Istediginiz Ogrencinin Numarasini Giriniz:";		cin >> studentNumber;		search_Lecture_By_Number(NoteListHead , studentNumber);		break;						case 'd':		cout << "Karnesini Goruntulemek Istediginiz Ogrencinin Numarasini Giriniz:";		cin >> studentNumber;		plot_For_Student(NoteListHead , studentNumber);		break;	}	}void search_Lecture_By_Number(Note *NoteListHead , int studentNumber) {	struct Note *temp = NoteListHead;	while (temp != NULL) {		if (temp -> studentNumber == studentNumber ) {			cout << "Ders Bilgileri : " << temp -> studentNumber << "\t" << temp -> studentLectureCode << endl;		}		temp = temp -> nextNote;	}	cout << "";}void plot_For_Student(Note *NoteListHead , int studentNumber ) {	struct student *studentForPlot = get_Student_Information_From_Student_File(studentNumber);	cout << "Ogrenci Bilgileri : " << studentForPlot -> studentNameBuffer  << "\t" << studentForPlot -> studentSectionBuffer << "\t" << studentForPlot -> studentNumber << endl;	struct lecture *lectureForPLot;	struct Note *temp = NoteListHead;		while (temp != NULL) {	 lectureForPLot = get_Lecture_Information_From_Lecture_File(temp -> studentLectureCode);	 if (temp -> studentLectureCode == lectureForPLot -> lectureCode) {	 	if (temp -> studentNumber == studentForPlot -> studentNumber) {		 cout << "Dersin Adi :"<< lectureForPLot -> lectureNameBuffer << "\t Dersin Notu:" << temp -> studentLectureNote << endl; 	 	}	 }	 temp = temp -> nextNote;}}Note *create_Lecture_Notes_List() {	FILE *file;	file = fopen("lectureNotes.txt" , "r");	struct Note *NoteListHead = NULL;	int studentNumber;	int lectureCode;	int lectureNote;		while (!feof(file)) {		//lectureNote = NULL;		fscanf(file , "%d\t%d\t%d" , &studentNumber , &lectureCode , &lectureNote);		cout << "Not Bilgileri: " << "\t" << studentNumber <<"\t"<< lectureCode  << "\t" << lectureNote; 		NoteListHead = register_Note_to_LectureNote_List(NoteListHead ,studentNumber , lectureCode , lectureNote);	 	//NoteListHead = register_Note_to_LectureNote_List(NoteListHead ,studentNumber , lectureCode , lectureNote);	 		}		return NoteListHead;	}Note *register_Note_to_LectureNote_List(Note *NoteListHead, int studentNumber , int lectureCode , int lectureNote) {	struct Note *temp = NoteListHead;	if (NoteListHead == NULL) {		NoteListHead = new Note();		NoteListHead -> studentLectureCode = lectureCode;		NoteListHead -> studentNumber = studentNumber;		NoteListHead -> nextNote = NULL;		return NoteListHead;	} else if (temp -> studentLectureCode < lectureCode) {		while (temp -> nextNote != NULL && temp -> nextNote -> studentLectureCode < lectureCode) {			temp = temp -> nextNote;		}				struct Note *newNote = new Note();		newNote -> studentLectureCode = lectureCode;		newNote -> studentLectureNote = lectureNote;		newNote -> studentNumber = studentNumber;		if (temp -> nextNote == NULL) {			temp -> nextNote = newNote;			newNote -> nextNote = NULL;		} else {			newNote -> nextNote = temp -> nextNote;			temp -> nextNote = newNote; 		}				return NoteListHead;		} else {		struct Note *newNote = new Note();		newNote -> studentLectureCode = lectureCode;		newNote -> studentLectureNote = lectureNote;		newNote -> studentNumber = studentNumber;		newNote -> nextNote = NoteListHead;		return newNote;	}}	lecture *get_Lecture_Information_From_Lecture_File(int lectureCode) {	int lectureCodeFromFile;	char lectureNameBuffer[50];	FILE *file;	struct lecture *returnValue = new lecture();	file = fopen("lecture.txt" , "r");		while (!feof(file)) {		fscanf(file , "%s\t%d\n" , lectureNameBuffer , &lectureCodeFromFile);		if (lectureCodeFromFile == lectureCode) {			strcpy(returnValue -> lectureNameBuffer , lectureNameBuffer);			returnValue -> lectureCode = lectureCodeFromFile;			return returnValue;		}	}		returnValue -> lectureCode = 0;		return returnValue;}student *get_Student_Information_From_Student_File(int studentNumber) {	char studentNameBuffer[50];	char studentSectionBuffer[50];	int studentGrade;	int trash;	struct student *returnValue = new student();	FILE *file;	file = fopen("student.txt" , "r");		while (!feof(file)){ 		fscanf(file , "%s\t%s\t%d\t%d\n" , studentNameBuffer , studentSectionBuffer , &studentGrade , &trash);		if (trash == studentNumber) {			returnValue -> studentNumber = studentNumber;			strcpy(returnValue -> studentNameBuffer , studentNameBuffer);			returnValue -> Grade = studentGrade;			strcpy(returnValue -> studentSectionBuffer , studentSectionBuffer);			return returnValue;			}	}	return returnValue;}void print_Lecture_Note_Options(){	cout << "a. Ogrenciye Ders Ekleme" << endl;	cout << "b. Ogrencinin Aldigi Ders Icin Not Girisi" << endl;	cout << "c. Ogrenci Ders Listeleme" << endl;	cout << "d. Ogrenci Karnesi Olusturma ve Gorsellestirme";}