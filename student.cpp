#include <iostream>#include <fstream>#include <string>#include <cstdlib>//#include <vektor>using namespace std;struct student{	char nameBuffer[50];	char sectionBuffer[50];		int Grade;	int studentNumber;		student *nextStudent;};student *create_Student_List();student *register_Student_to_Student_List(student *studentListHead, char *name , char *section , int Grade , int studentNumber);void search_Student_By_Number(student *studentListHead , int studentNumber);void search_Student_By_Name(student *studentListHead , char *studentName);void print_Student_Sorted_By_Section(student *studentListHead , char *section);void print_Student_Sorted_By_Grade(student *studentListHead , int Grade);void print_Student_Options();void change_Student_Information(int , student *studentListHead);char get_UserChoise_For_Student_Options();void print_Student_List(student *studentListHead);void execute_Function_Defined_By_userChoise_For_Student_Option(char);void write_Student_Information_To_students_File(student *studentListHead);//FILE *student_Information_File;using namespace std;int main (){		while (5){		system("clear");		print_Student_Options();		execute_Function_Defined_By_userChoise_For_Student_Option(get_UserChoise_For_Student_Options());	}	return 0;}void print_Student_List(student *studentListHead) {	while (studentListHead != NULL) {		cout << studentListHead -> nameBuffer << "\t" << studentListHead -> sectionBuffer << "\t" << studentListHead -> Grade << "\t" << studentListHead -> studentNumber << endl ; 		studentListHead = studentListHead -> nextStudent;	}}student *create_Student_List() {	FILE *file;		file = fopen("student.txt" , "r");	struct student *studentListHead = NULL;	char name[50] , section[50];	int Grade , studentNumber;		while(!feof(file)) {				fscanf(file, "%s\t%s\t%d\t%d\n",name,section , &Grade , &studentNumber);				studentListHead = register_Student_to_Student_List(studentListHead , name , section , Grade , studentNumber);	}		return studentListHead;}student *register_Student_to_Student_List(student *studentListHead, char *name , char *section , int Grade , int studentNumber) {	struct student *temp = studentListHead;	if (studentListHead == NULL) {		studentListHead = new student();		strcpy(studentListHead -> nameBuffer , name);		strcpy(studentListHead -> sectionBuffer , section);		studentListHead -> Grade = Grade;		studentListHead -> studentNumber = studentNumber;		studentListHead -> nextStudent = NULL;		return studentListHead;	} else if (temp -> studentNumber < studentNumber) {		while (temp -> nextStudent != NULL && temp -> nextStudent->studentNumber < studentNumber) {			temp = temp -> nextStudent;		}				struct student *newStudent = new student();		strcpy(newStudent -> nameBuffer , name);		strcpy(newStudent -> sectionBuffer , section);		newStudent -> Grade = Grade;		newStudent -> studentNumber = studentNumber;				if (temp -> nextStudent == NULL) {			temp -> nextStudent = newStudent;			newStudent -> nextStudent = NULL;		} else {			newStudent -> nextStudent = temp -> nextStudent;			temp -> nextStudent = newStudent; 		}				return studentListHead;		} else {		struct student *newStudent = new student();		strcpy(newStudent -> nameBuffer , name);		strcpy(newStudent -> sectionBuffer , section);		newStudent -> Grade = Grade;		newStudent -> studentNumber = studentNumber;		newStudent -> nextStudent = studentListHead;		return newStudent;	}}void write_Student_Information_To_students_File(student *studentListHead) {	struct student *temp = studentListHead;	FILE *file;	file = fopen("student.txt" , "w");	while (temp != NULL) {		//cout << temp -> nameBuffer;		fprintf(file,"%s\t%s\t\%d\t%d\n" , temp->nameBuffer , temp -> sectionBuffer , temp -> Grade , temp -> studentNumber);		temp = temp -> nextStudent;	}	fclose(file);	}void execute_Function_Defined_By_userChoise_For_Student_Option(char userChoise) {	struct student *studentListHead = create_Student_List();	system("clear");	char name[50] , section[50];	int Grade , studentNumber;	switch(userChoise) {		case 'A':			cout << "Kayit Etmek Istediginiz Ogrenci Adini Giriniz:" << endl;			cin >> name;			cout << "Kayit Etmek Istedigniz Ogrencinin Bolumunu Giriniz:" << endl;			cin >> section;			cout << "Kayit Etmek Istediginiz Ogrencinin Kacinci Sinif Oldugunu Girinid:" << endl;			cin >> Grade;			cout << "Kayit Etmek Istediginiz Ogrencinin Numarasini Giriniz:" << endl;			cin >> studentNumber;			studentListHead = register_Student_to_Student_List(studentListHead , name , section , Grade , studentNumber);			write_Student_Information_To_students_File(studentListHead);			break;				case 'D':			cout << "Bilgilerini Duzenlemek Istediginiz Ogrencinin Numarasini Giriniz";			cin >> studentNumber;			change_Student_Information(studentNumber,studentListHead);			break;				case 'E':			cout << "Bilgilerini Goruntulemek Istediginiz Ogrencinin Numarasini Giriniz";			cin >> studentNumber;			search_Student_By_Number(studentListHead , studentNumber);			break;					case 'F':			cout << "Bilgilerini Goruntulemek Istediginiz Ogrencinin Ismini Giriniz";			cin >> name;			search_Student_By_Name(studentListHead , name);			break;					case 'G':			cout << "Bilgilerini Goruntulemek Istediginiz Ogrencilerin Bolumunu Giriniz:";			cin >> section;			print_Student_Sorted_By_Section(studentListHead , section);			break;					case 'H':			cout << "Bilgilerini Goruntulemek Istediginiz Ogrencilerin Kacinci Sinif Olacagini Giriniz";			cin >> Grade;			print_Student_Sorted_By_Grade(studentListHead , Grade);			break;				}	return;}void print_Student_Sorted_By_Grade(student *studentListHead , int Grade) {	struct student *temp = studentListHead;	while (temp != NULL) {		if (temp -> Grade == Grade) {			cout << "Ogrenci Bilgileri : " << temp -> nameBuffer << "\t" << temp -> sectionBuffer << "\t" << temp -> Grade << "\t" << temp->studentNumber << endl;					}		temp = temp -> nextStudent;	}}void print_Student_Sorted_By_Section(student *studentListHead , char *section) {	struct student *temp = studentListHead;	while (temp != NULL) {		if (strcmp(temp->sectionBuffer , section) == 0) {			cout << "Ogrenci Bilgileri:" << temp->sectionBuffer << "\t" << temp -> nameBuffer << "\t" << temp -> Grade << "\t" << temp -> studentNumber << endl;  		}		temp = temp -> nextStudent;	}}void search_Student_By_Number(student *studentListHead , int studentNumber) {	struct student *temp = studentListHead;	while (temp != NULL) {		if (temp -> studentNumber == studentNumber) {			cout << "Ogrenci Bilgileri : " << temp -> nameBuffer << "\t" << temp -> sectionBuffer << "\t" << temp -> Grade << "\t" << temp->studentNumber << endl;			return;		}		temp = temp -> nextStudent;	}	}void search_Student_By_Name(student *studentListHead , char *studentName) {	struct student *temp = studentListHead;	while (temp != NULL) {		if (strcmp(temp->nameBuffer , studentName) == 0) {			cout << "Ogrenci Bilgileri : " << temp -> nameBuffer << "\t" << temp -> sectionBuffer << "\t" << temp -> Grade << "\t" << temp->studentNumber << endl;			return;		}		temp = temp -> nextStudent;	}	cout << "Aradiginiz Ogrenci Bulunamadi";}void change_Student_Information(int studentNumber , student *studentListHead) {	struct student *temp = studentListHead;	while (temp != NULL) {		if (temp -> studentNumber == studentNumber) {			cout << "Ogrenci Bilgileri : " << temp -> nameBuffer << "\t" << temp -> sectionBuffer << "\t" << temp -> Grade << "\t" << temp->studentNumber << endl;			cout << "Yeni Bilgileri Giriniz";			cout << "Ogrencinin Adi:" << endl;			cin >> temp->nameBuffer;			cout << "Ogrencinin Bolumu" << endl;			cin >> temp->sectionBuffer;			cout << "Ogrencinin Sinifi" << endl;			cin >> temp -> Grade;			cout << "Ogrencinin Numarasi" << endl;			cin >> temp -> studentNumber;			write_Student_Information_To_students_File(studentListHead);			return;		}		temp = temp -> nextStudent;		}	cout << "Aradiginiz Ogrenci Bulunamadi";}char get_UserChoise_For_Student_Options() {	char userChoiseBuffer;	char returnValue;	cin >> userChoiseBuffer;		switch(userChoiseBuffer) {		case 'a':			returnValue = 'A';			break;		case 'b':		  cout << "a. Ogrenci Numarasina Gore\n";			cout << "b. Ogrenci Adina Gore\n";			cin >> userChoiseBuffer;			if (userChoiseBuffer == 'a') {				returnValue = 'E';			} else if (userChoiseBuffer == 'b') {				returnValue = 'F';			}		break;				case 'c':			cout << "a. Bolume Gore Listeleme";			cout << "b. Sinifa Gore Listeleme";			cin >> userChoiseBuffer;			if (userChoiseBuffer == 'a') {				returnValue = 'G';				return returnValue;			} else if (userChoiseBuffer == 'b') {				returnValue = 'H';				return returnValue;			}			case 'd':				returnValue = 'D';				return returnValue;				break;					}						return returnValue;			}	void print_Student_Options() {	cout << "A.Ogrenci Kayit \n";	cout << "B.Ogrenci Arama\n";	cout << "\ta.Ogrenci Numarasina Gore\n";  cout << "\tb.Ogrenci Adina Gore\n";	cout << "C.Ogrenci Listeleme\n";	cout << "\ta.Bolumune Gore Listeleme \n";	cout << "\tb.Sinifina Gore Listeleme\n";  cout << "D. Ogrenci Bilgilerini Duzenle\n";}