#include <iostream>#include <fstream>#include <string>#include <cstdlib>using namespace std;struct instructor {	char nameBuffer[50];	char sectionBuffer[50];	int registrationNumber;		instructor *nextInstructor;};instructor *register_Instructor_to_Instructor_List(instructor *instructorListHead, char *name , char *section , int registrationNumber);instructor *create_instructor_List();void print_Instructor_Options();void search_Instructor_By_registrationNumber(instructor *instructorListHead , int registrationNumber);void change_Instructor_Information(int , instructor *InstructorListHead);void print_Instructor_Sorted_By_Section(instructor *instructorListHead , char *section);void write_Instructor_Information_To_Instructor_File(instructor *instructorListHead);void execute_Function_Defined_By_userChoise_For_Instructor_Option(char);int main () {	char userChoiseForIntructorOption;	while(5) {		//system("clear");		print_Instructor_Options();		cin >> userChoiseForIntructorOption;		 execute_Function_Defined_By_userChoise_For_Instructor_Option(userChoiseForIntructorOption);			}}void execute_Function_Defined_By_userChoise_For_Instructor_Option(char userChoise) {	struct instructor *instructorListHead = create_instructor_List();	system("clear");	char name[50] , section[50];	int registrationNumber;		switch(userChoise) {		case 'a':			cout << "Kayit Etmek Istediginiz Ogretim Uyesinin Adini Giriniz:" << endl;			cin >> name;			cout << "Kayit Etmek Istediginiz Ogretim Uyesinin Bolumunu Giriniz:" << endl;			cin >> section;			cout << "Kayit Etmek Istediginiz Ogretim Uyesinin Sicil Numarasini Giriniz:" << endl;			cin >> registrationNumber;			instructorListHead = register_Instructor_to_Instructor_List(instructorListHead , name , section , registrationNumber);			write_Instructor_Information_To_Instructor_File(instructorListHead);			break;		case 'b':			cout << "Bilgilerini Goruntulemek Isteginiz Ogretim Uyesinin Sicil Numarasini Giriniz:";			cin >> registrationNumber;			search_Instructor_By_registrationNumber(instructorListHead , registrationNumber);			break;				case 'c':			cout << "Bilgilerini Duzenlemek Istediginiz Ogretim Uyesinin Numarasini Giriniz:";			cin >> registrationNumber;			change_Instructor_Information(registrationNumber , instructorListHead);			break;				case 'd':		cout << "Bilgilerini Goruntulemek Istediginiz Ogretim Uyelerinin Hangi Bolume Mensup olduklarini Giriniz:";		cin >> section;		print_Instructor_Sorted_By_Section(instructorListHead , section);			}}void print_Instructor_Sorted_By_Section(instructor *instructorListHead , char *section) {	struct instructor *temp = instructorListHead;	while (temp != NULL) {		if (strcmp(temp->sectionBuffer , section) == 0) {			cout << "Ogretim Uyesi Bilgileri Bilgileri:" << temp->sectionBuffer << "\t" << temp -> nameBuffer << "\t" << temp -> registrationNumber << endl;  		}		temp = temp -> nextInstructor;	}}void change_Instructor_Information(int registrationNumber, instructor *InstructorListHead) {	struct instructor *temp = InstructorListHead;	while (temp != NULL) {		if (temp -> registrationNumber == registrationNumber) {			cout << "Ogretim Uyesi Bilgileri : " << temp -> nameBuffer << "\t" << temp -> sectionBuffer <<  "\t" << temp->registrationNumber << endl;			cout << "Yeni Bilgileri Giriniz";			cout << "Ogretim Uyesinin Adi:" << endl;			cin >> temp->nameBuffer;			cout << "Ogretim Uyesinin Bolumu" << endl;			cin >> temp->sectionBuffer;			cout << "Ogretim Uyesinin Sicil Numarasi" << endl;			cin >> temp -> registrationNumber;			write_Instructor_Information_To_Instructor_File(InstructorListHead);			return;		}		temp = temp -> nextInstructor;		}	cout << "Aradiginiz Ogretim Uyesi Bulunamadi";}void search_Instructor_By_registrationNumber(instructor *instructorListHead , int registrationNumber) {	struct instructor *temp = instructorListHead;	while (temp != NULL) {		if (temp -> registrationNumber == registrationNumber) {			cout << "Ogrenci Bilgileri : " << temp -> nameBuffer << "\t" << temp -> sectionBuffer << "\t" << temp->registrationNumber << endl;			return;		}		temp = temp -> nextInstructor;	}	}void write_Instructor_Information_To_Instructor_File(instructor *instructorListHead) {	struct instructor *temp = instructorListHead;	FILE *file;	file = fopen("instructor.txt" , "w");	while(temp != NULL) {		fprintf(file , "%s\t%s\t%d\n" , temp -> nameBuffer , temp -> sectionBuffer , temp -> registrationNumber);		temp = temp -> nextInstructor;	}	fclose(file);}instructor *create_instructor_List() {	FILE *file;		file = fopen("instructor.txt" , "r");	struct instructor *instructorListHead = NULL;	char name[50] , section[50];	int registrationNumber;		while(!feof(file)) {				fscanf(file, "%s\t%s\t%d\n",name,section , &registrationNumber);				instructorListHead = register_Instructor_to_Instructor_List(instructorListHead , name , section , registrationNumber);	}		return instructorListHead;}instructor *register_Instructor_to_Instructor_List(instructor *instructorListHead, char *name , char *section , int registrationNumber) {	struct instructor *temp = instructorListHead;	if (instructorListHead == NULL) {		instructorListHead = new instructor();		strcpy(instructorListHead -> nameBuffer , name);		strcpy(instructorListHead -> sectionBuffer , section);		instructorListHead -> registrationNumber = registrationNumber;		instructorListHead -> nextInstructor = NULL;		return instructorListHead;	} else if (temp -> registrationNumber < registrationNumber) {		while (temp -> nextInstructor != NULL && temp -> nextInstructor->registrationNumber < registrationNumber) {			temp = temp -> nextInstructor;		}				struct instructor *newInstructor = new instructor();		strcpy(newInstructor -> nameBuffer , name);		strcpy(newInstructor -> sectionBuffer , section);		newInstructor -> registrationNumber = registrationNumber;				if (temp -> nextInstructor == NULL) {			temp -> nextInstructor = newInstructor;			newInstructor -> nextInstructor = NULL;		} else {			newInstructor -> nextInstructor = temp -> nextInstructor;			temp -> nextInstructor = newInstructor; 		}				return instructorListHead;		} else {		struct instructor *newInstructor = new instructor();		strcpy(newInstructor -> nameBuffer , name);		strcpy(newInstructor -> sectionBuffer , section);		newInstructor -> registrationNumber = registrationNumber;		newInstructor -> nextInstructor = instructorListHead;		return newInstructor;	}}void print_Instructor_Options() {	cout << "a. Ogretim Elemani Kayit" << endl;	cout << "b. Ogretim Elemani Arama (Sicil Numarasina Gore)" << endl;	cout << "c. Ogretim Elemani Bilgileri Duzeltme" << endl;	cout << "d. Ogretim Elemani Listeleme(Bolume Gore)";}